============================= test session starts =============================
platform win32 -- Python 3.10.5, pytest-7.3.2, pluggy-1.2.0
rootdir: C:\Users\Way\environments\selenium_env\Scripts
collected 1 item

. 
Start browser Google Chrome 
2
F
Quit browser..


================================== FAILURES ===================================
_______________________________ test_create_ou ________________________________

browser = <selenium.webdriver.chrome.webdriver.WebDriver (session="c7c6b67e72fb2d1aad896478ad561e7e")>

    def test_create_ou(browser):
        browser.get(link_main)
    
        button_create = browser.find_element(By.CSS_SELECTOR, ".el-button.el-button--primary.el-button--default")
        button_create.click()
        time.sleep(3)
    
        buttons_create = browser.find_elements(By.CSS_SELECTOR, ".el-button.el-button--primary.el-button--default")
        print(len(buttons_create))
    
    
        input_name = browser.find_elements(By.CSS_SELECTOR, ".el-input__inner")
        input_name[1].send_keys("Название")
        buttons_create[1].click()
    
        button_create = browser.find_element(By.CSS_SELECTOR, ".el-button.el-button--primary.el-button--default")
        button_create.click()
        time.sleep(3)
    
    
    
        input_name = browser.find_elements(By.CSS_SELECTOR, ".el-input__inner")
        input_name[1].send_keys("Название&Тип")
    
        input_type = browser.find_elements(By.CSS_SELECTOR, ".el-icon.el-select__caret.el-select__icon")
        input_type[0].click()
    
        time.sleep(3)
        input_type[0].click()
    
        input_select = browser.find_element(By.CSS_SELECTOR, "ul.el-scrollbar__view.el-select-dropdown__list> .el-select-dropdown__item:nth-child(1)")
        input_select.click()
        time.sleep(1)
        input_type[0].click()
    
        input_select = browser.find_element(By.CSS_SELECTOR, "ul.el-scrollbar__view.el-select-dropdown__list> .el-select-dropdown__item:nth-child(2)")
        input_select.click()
        time.sleep(1)
        input_type[0].click()
    
        input_select = browser.find_element(By.CSS_SELECTOR, "ul.el-scrollbar__view.el-select-dropdown__list> .el-select-dropdown__item:nth-child(3)")
        #input_select.click()
        time.sleep(1)
    
>       buttons_create[1].click()

d:\a\test_uc.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\lib\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
..\lib\site-packages\selenium\webdriver\remote\webelement.py:403: in _execute
    return self._parent.execute(command, params)
..\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D442B39000>
response = {'status': 404, 'value': '{"value":{"error":"stale element reference","message":"stale element reference: stale elemen...07FF60C4067A3]\\n\\tBaseThreadInitThunk [0x00007FFE06E97614+20]\\n\\tRtlUserThreadStart [0x00007FFE073826B1+33]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found
E         (Session info: chrome=116.0.5845.97)
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF60C4952A2+57122]
E       	(No symbol) [0x00007FF60C40EA92]
E       	(No symbol) [0x00007FF60C2DE3AB]
E       	(No symbol) [0x00007FF60C2E2382]
E       	(No symbol) [0x00007FF60C2E3D2F]
E       	(No symbol) [0x00007FF60C2E3E20]
E       	(No symbol) [0x00007FF60C3194CC]
E       	(No symbol) [0x00007FF60C30F026]
E       	(No symbol) [0x00007FF60C336FDA]
E       	(No symbol) [0x00007FF60C30EB76]
E       	(No symbol) [0x00007FF60C3371F0]
E       	(No symbol) [0x00007FF60C34EB82]
E       	(No symbol) [0x00007FF60C336DB3]
E       	(No symbol) [0x00007FF60C30D2B1]
E       	(No symbol) [0x00007FF60C30E494]
E       	GetHandleVerifier [0x00007FF60C73EF82+2849794]
E       	GetHandleVerifier [0x00007FF60C791D24+3189156]
E       	GetHandleVerifier [0x00007FF60C78ACAF+3160367]
E       	GetHandleVerifier [0x00007FF60C526D06+653702]
E       	(No symbol) [0x00007FF60C41A208]
E       	(No symbol) [0x00007FF60C4162C4]
E       	(No symbol) [0x00007FF60C4163F6]
E       	(No symbol) [0x00007FF60C4067A3]
E       	BaseThreadInitThunk [0x00007FFE06E97614+20]
E       	RtlUserThreadStart [0x00007FFE073826B1+33]

..\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: StaleElementReferenceException
=========================== short test summary info ===========================
FAILED ::test_create_ou - selenium.common.exceptions.StaleElementReferenceExc...
============================= 1 failed in 20.05s ==============================
